npm create vite@latest NA PASTA QUE VAI CRIAR A PASTA DO PROJETO
npm i
remove read.me, icon no html, eslint, eslint nas dependencias, assets -> npm i p apagar tudo
remove css, colcoa export default pra exportacao nomeada

git init - ja deixa tudo verdinho dizendo que vai mudar quando commitar la no repo, 
e ja fica tbm apagadinho os arquivos que sao do gitignore

- shadcn ui
componentes padronizados que foram pegos do radix por exemplo, que eh uma biblioteca com componentes puros, sem estilziacao

fazer esses comandos:

[Vite - shadcn/ui](https://ui.shadcn.com/docs/installation/vite)

pra importar componentes, tem que importar um por um, a pasta componentes vem vazia.


- eslint - 
instalando eslint e o eslint da rocketseat
npm i eslint @rocketseat/eslint-config -D
.eslintrc.json

{
    "extends": ["@rocketseat/eslint-config/react"],
}

instalar prettier: [tailwindlabs/prettier-plugin-tailwindcss: A Prettier plugin for Tailwind CSS that 
automatically sorts classes based on our recommended class order. (github.com)](https://github.com/tailwindlabs/prettier-plugin-tailwindcss)

npm i -D prettier nao precisa pois ja tem no rocketseat eslint

npm i -D prettier-plugin-tailwindcss

criar arquivo prettier.config.ts

reload window vscode

se tiver que usar o module.exports nesse arquivo prettier pq ele ainda nao suport 
aquele exports default, entao trocar a extensao do arquivo pra cjs

plugin eslint-plugin-simple-import-sort: [lydell/eslint-plugin-simple-import-sort: 
Easy autofixable import sorting. (github.com)](https://github.com/lydell/eslint-plugin-simple-import-sort)


---
instalando react router dom
n estamos usando next, remix, astro, entao n temos estrutura pronta de roteamento. e 
como o react eh uma biblioteca de construcao de interface, ele nao tras consigo 
uma funcionaidade de rotas, paginas. Basicamente eh tudo uma unica pagina so

[Tutorial v6.22.3 | React Router](https://reactrouter.com/en/main/start/tutorial)

----------------------------------------------------------------
layouts - tanto a parte de auth quanto a de app vao ter componentes em comum,
por ex, cadastro e login na parte de auth, vao ter partes em comuns. e no app,
todas as paginas vao ter cabecalho, rodape, etc.

outlet eh o componente p especfiicar aonde que vai entrar o que eh
especifico de cada pagina. ou seja, o q nao eh comum entre as paginas.

nas rotas, em cada rota agora fica no element o layout referente. como 
children, vamos colocar as rotas que usarao aquele layout, que eh o outlet

react-helmet-async para colocar titulos dinamicos em cada pagina
(Login | pizza.shop) - Login eh dinamico e pizza.shop eh estatico

- login page
-layout com a parte da esquerda
pagina sign-in
 - title do helmet pega a parte %2 q fizemos no layout
 - label e input sao do shadcn-ui(px shadcn-ui@latest add input label)
 - troca de tema - https://ui.shadcn.com/themes - copiar o codigo e colar em global.css


- react hook form
npm i react-hook-form zod @hookform/resolvers
zod p validacao e transformacao de dados
hookform resolver -integracao do react-hook-form com as libs de validacao(zod no caso)

-import useForm
- const { register, handleSubmit} = useForm() 
  -register p registrar campso no formulario - jogar no input
  -handleSubmit - lidar com submit do formulario(ja lida com a parte de propagacao,
  n precisa de prevent default)
  high order funciton(pattern) - vamos usar o handlesubmit do useForm p chamar a funcao 
  handleSignIn()
- usar zod pra validacao 
   -z.object - quando usuario fizer submit, vai mandar o email atraves do register:

        <Input id="email" type="email" {...register('email')} />

   para o handleSignIn atraves do handleSubmit:

        <form className="space-y-4" onSubmit={handleSubmit(handleSignIn)}>
    
    essa funcao recebe um email, que eh uma string, entao vamos validar:

        const signInForm = z.object({
            email: z.string().email(),
        })

    vamos tambem tipar

        type SignInForm = z.infer<typeof signInForm>

    e agora, o handleSignIn vai receber esse signInForm(que no momento tem so um email que eh string)

        async function handleSignIn(data: SignInForm)

    data vai ficar no formato - { email: 'rodrigo@outlook.com'}


-formState do useForm:
    formState: { isSubmitting },
esse isSubmitting eh true esta carregnado, em estado de submit
eh false quando deu erro ou sucesso, quando nao ta carregnad, quando usuario n clicou

ai usa pra boolear o disabled do botao
<Button disabled={isSubmitting} className="w-full" type="submit">


-TOAST da lib sonner
 -facilita msgs de sucesso e erro pro usuario.
 - podemos colocar mais um parametro pra estilizar mais, com o "action" por exemplo


- pagina de cadastro

signUp eh parecido com a signIn
- selecionar signIn, ctrl + shift + p, selecionar "replace" escreve signUp,
- clicar para preservar case, ou seja, o signIn vai ficar signUp e SignIn fica SignUp

nas rotas de Auth, colocar mais um path no children, dessa vez para o signUp
        {
          path: '/sign-un',
          element: <SignUp />,
        },


- na div do outlet no authLayout, vamos colocar relative, e entao no SignUp, vamos poder
colocar um link usando position absolute

no SignUp - botao pra ir pro SignIn
<Button variant="ghost" asChild className="absolute right-8 top-8">
          <Link to="/sign-in">Fazer login</Link>
</Button>

e no SignIn, botao p ir pro SignUp 
<Button variant="ghost" asChild className="absolute right-8 top-8">
          <Link to="/sign-up">Novo estabelecimento</Link>
</Button>
esse link funciona como uma ancora, mas n faz reload total da pagina

---criar mais campos pra esse SignUp ---

-alterar a validacao
const signUpForm = z.object({
  restaurantName: z.string(),
  managerName: z.string(),
  phone: z.string(),
  email: z.string().email(),
})

-criar mais input com labels e registers
<div className="space-y-2">
    <Label htmlFor="xxx">xxxx</Label>
    <Input id="xxx" type="xxx" {...register('xxx')} />
</div>

-toast alterado para sucesso no caso de restaraunte cadastro
-no action, podemos fazer um botao "login", que ao clicado, redireciona
para a pagina de login(pois o usuario ja tem conta agora)
pra isso, vamos usar useNavigate


import { Link, useNavigate } from 'react-router-dom'
const navigate = useNavigate()

toast.success('Restaurante cadastrado com sucesso!', {
        action: {
          label: 'Login',
          onClick: () => navigate('/sign-in'),
        },
      })


----layout do app com cabecalho
app layouts
flex min h screen p ocupar no minimo a altura da tela toda

flex flex-1 - p ocupar a altura da tela toda tirando a altura do cabecalho

header
border-b - borda de separacao c cabecalho

npx shadcn-ui@latest add separator
pra usar o Separator - uma linha vertical ou horizontal

lg:space-x-6 - em caso de telas maiores


criar componente de links, ate pq vms querer botar estilizacao especifica e
um compoortamento, de que o icone ativo, fique em negrito, diferente do outro

pra poder extender as propriedades de um link do react router dom
export type NavLinkProps = LinkProps

deixar aquele link em negrito p sinalizar que esta na pagina dele:
useLocation do react-router-dom
const { pathname } = useLocation()

se o pathname for igual a rota atual:
data-current={pathname === props.to}
entao retorna true.

se for true, estilize:
data-[current=true]:text-foreground


---dark mode
colar o codigo pronto pro vite la no shadcnui
codigo do botao tbm

npx shadcn-ui@latest add dropdown-menu

-------------------------------------------------


usando a api - bun - Windows Subsystem for Linux (WSL)
https://github.com/rocketseat-education/pizzashop-api
https://learn.microsoft.com/en-us/windows/wsl/install
https://bun.sh/docs/installation
https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode


wsl --install
wsl --install -d Ubuntu

instalando bun 
curl -fsSL https://bun.sh/install | bash 

pra entrar no terminal referente a esse wsl, digitar wsl no terminal

ao clonar a api, dar um code . com o wsl ^ligado^

https://educoutinho.com.br/windows/instalando-docker-no-wsl/

instalado docker no wsl, rodar o docker compose up -d na api do pizzashop
-d p rodar em modo detached, nao fica rodando no terminal pra precisar manter o terminal aberto

bun i 
bun migrate (RESEND_API_KEY=".") 


------------------------------------------

vamos fazer o api client, o cliente que vamos usar no frontend pra se comunicar com o backend

AXIOS


axios.ts - criar a api, mas a url nao pode ser estatica

.env.local - VITE_API_URL=""
variavel ambiente tem que comecar com VITE_ no vite


no axios, a baseURL: ficaria import.meta.env...
mas dessa forma, nao temos validacao das variaveis de ambiuente

-> criar um env.ts no src
faz validacao com zod.

agora, no axios, colocar 
baseURL: env.VITE_API_URL,

dessa forma, o parse vai validar que aquele meta.en tem a mesma estrutura
daquele schema que fizemos


REACT-QUERY
- hooks pra facilitar requisicoes entre front e back
- ferramenta fantastica

-> criar react-query.ts p exportar o client

-> jogar esse client no app.tsx, antes das rotas
(antes das rotas pois provavelmente n usaremos em outros lugares)
passando aquele queryClient que fizemos no react-query.ts

<QueryClientProvider client={queryClient}>
          <RouterProvider router={router} />
</QueryClientProvider>


----------------------------------------------------------------

AUTENTICACAO
no sign-in, no processo de login, estamos apenas fazendo um delay e dps
mandando um toast de success.
-vms manter o maximo possivel das comunicacaos feitas entre front e 
back tipadas, isso permite que saibemos exatamente qausi sao os dados 
retornados de tal requisicao. 
Vamos fazer manualmente, apesar de ter ferramentas que fazem isso de forma
automatizada, como trpc ou graphql.

fazer uma pasta API no src, fazer um arquivo pra cada rota, por ex:
sign-in.ts com a funcao que esta encapsulando o axios e com tipagem
APENAS o tipo de entrada ( email), pois no caso da rota authenticate, nao
ha retorno (saida)


ao fazer signIn no sign-in.ts com a rota authenticate, 

reactquery tem o useMutation, usaremos sempre que fizermos uma mutacao,
que eh qualquer acao que nao seja de listagem, ou de retorno.

se estamos criando algo, todo post, put, delete, eh uma mutation.
um get eh uma query.

esse useMutation nos da acesso a varias funcionalidades,
retry, networkdMode, onError, onSuccess.

o useMutation tbm retorna varias informacoes 

const { mutateAsync: authenticate } = useMutation({
    mutationFn: signIn,
  })

  por exemplo, esse mutateSync, que renomeamos para authenticate.
  tbm podemos saber quando o usuario chamou essa requisicao,
  qual o status, isSuccess, isError, isIdle, isPending, isPause, etc.

  o mutationAsync vamos usar para chamamr a funcao signIn.
  mutationAsync eh uma funcao. chamando esse mutationAsync, vamos
  disparar aquela funcao no mutationFn, que eh a signIn.

  await mutationAsync({ email: data.email })
  como renomeamos,:
  await authenticate({ email: data.email })
  renomeamos para authenticate pois podemos ter varias mutations no mesmo arquivo.

  Agora podemos fazer nosso primeiro teste de integracao com a API.
  primeiro integramos o metodo de autenticacao, da rota authenticate com axios.

  ao colocar o email que ta cadastrado la no backend ao rodar o bun seed 
  la no painel de sign-in do front end, ao clicarmos, vai aparecer o toast
  de sucesso.

  no browser, inspecionar, networkd(rede), podemos filtrar para apenas "Fetch/XHR",
  pra visualizar apenas as requisicoes ao backend

  aparece la que foi disparado o authenticate, podemos clicar e ver as
  informacoes daquela requisicao, o cabecalho, o payload,repsonse, etc.

  no backend ta configurado pra dar apenas um console.log no link que seria 
  mandado para o email do usuario, para, ao clicar nesse link, entrar no site 
  de forma logada, o tal do magic link, passwordless. 

  Quando entra por esse link, seremos autenticados e redirecionados de volta pro
  frontend.
  A diferenca eh que nesse front-end, ha um cookie salvo no navegador, JWT,
  que foi salvo la pelo backend.
  o backend salvou esse cookie como httpOnly, que faz com que esse cookie nao seja acessivel
  pelas apis do browser, pelo document. (n da p fzr document.cookie). Essse cookie
  so ta visivel no backend da aplicacao.
  Isso eh seguro pois extensoes instalada sno navegador nao sejam acessiveis a esse cookie.


----------------------------------------------------------------
CADASTRO DE Restaurante

-> fazer a funcaozinha de axios la na pasta api.

-> no signUp, pegar mutateAsync do useMutation novamente para chamar 
o registerRestaurant que fizemos la no register-restaurants.ts na pasta api.
obviamente mandando os valores do form , que foram especificados na interface feita
pelo zod.

-> ao criarmos, fazer a requisicao, e dar sucesso, estamos mandando ali o toast
com um botao para navegacao para o /sing-in

onClick: () => navigate('/sign-in'),

vamos mandar pra esse sign-in, um query parameter.

onClick: () => navigate(`/sign-in?email=${data.email}`),

mandando exatamente o mesmo email que ele acabou de se cadastrar, que ainda esta ali
no data: SignUpForm do handleSignUp.

e VAMOS PEGAR ESSE EMAIL la no sign-in usando useSearchParams do react-router-dom

const [searchParams] = useSearchParams()
eh como se fosse um useState, a primeira posicao do array retorna os search parameters
da url, e na segunda posicao, uma funcao p atualizar esses parametros.

vamos acessar apenas o primeiro, entao vamos desestruturar: [searchParams]

e no useForm, vamos colocar um defaultValues e vamos setar para que NO campo email,
caso nao seja nulo o searchParams.get('email'), vamos ja colocar esse defaultvalue para
quando o usuario for p essa pagina depois de fazer o cadastro (sign-up), ja esteja ali
escrito o email que ele acabou de criar.



------------------------------------------------------
perfil no cabecalho

eh no header -> AccountMenu

-criar na api - get-profile.ts
com a funcao que vms usar p buscar os dados

export async function getProfile() {
  const response = await api.get('/me')

  return response.data
}

vamos tipar as entradas, entao vamos la no arquivo backend, procurar
o get-profile.ts e passar o mouse me cima p saber qual eh o tipo de
retorno de user

ai faz a interface e o generics <>, que eh exatamente o que aquele
.data vai retornar


-vamos pegar os dados no AccountMenu.

ao inves de usar useMutation, usaremos useQuery

const { data: profile } = useQuery({
    queryKey: ['profile'],
    queryFn: getProfile,
  })

  getProfile eh aquela funcao q fizemos la com axios agora pouco
  queryKey - profile - se em outro lugar da aplicacao eu fizer requisicao 
  que tem a ver com profile(user), quando eu passo esse dado, o react-query
  ve se ja foi feito uma requisicao anteriormente e usa os dados do  cache

  agora podemos usar o profile(data) ao longo do componente.

  o cookie do browser precisa ser enviado ao backend, o token ne
entao: 
export const api = axios.create({
  baseURL: env.VITE_API_URL,
  //adicioonar essa linha
  withCredentials: true,
})

dessa forma, os cookies do frontend sao enviados ao backend automaticamente


-la no botaozinho queremos o nome do restaurante:

novamente, faz o arquivo na api com a rota, faz a interface.

hack para ter delay nas requisicoes:
- var ambiente true no env.local
- validacao no env.ts
- funcao no axios.ts de adicionar delay ao interceptar cada req.


loading- pegar isLoading de cada useQuery.
ternario padrao com skeleton (chimer)
{isLoadingManagedRestaurant ? (
  <Skeleton className="h-4 w-40" />
) : (
  managedRestaurant?.name
)}


---------------------------------------------------
MODAL DE ATUALIZACAO DE PERFIL (DIALOG)

-Dialog por volta de tudo(do ui.dialog)(do shadcnui)
pra poder ter contexto de dialog, ele eh um contextProvider do react

dialog trigger por volta dos items do dropdown. 
asChild pro DropdownMenuItem(primeiro componente abaixo)
assuma as suas propriedades(abra o dialog)
sem perder a estilizacao do dropdownmenuitem

dentro do dialog, o conteudo do dialog, o componente <StoreProfileDialog />

-no store-profile-dialog.tsx, o dialog, ha os botoes no footer.
temos as variants padroes que ja vieram no shadcnui, mas nao temos a 
de sucesso, meio verdinha, entao vms la no componente e criar na hora

-labels e inputs, com htmlFor e ids correspondentes

-temos que pegar os dados do restaurante DE NOVO, e ja que estamos usando
useQuery, n precisamos passar de componente pra componente, podemos simplesmente
fazer o useQuery de novo, com a mesma queryKey da outra vez. Dessa forma, a requisicao
anterior eh reaproveitada.

-vamos jogar esses dados do restaurante no form. 
padrao, z.objets p validar com zod, z.infer pra tipar, 
useForm com o register, 
com o resolver pegando aquele schema que fizemos,
com o values ao inves de defaultValues nos inputs.
(values pq fica observando sempre, e como os componentes do radix(que sao
usados pelo shadcnui) carregam as paradinhas do modal antes mesmo de aparecer,
entao com o defaultValues acaba iniciando com os valores zerados pois foram preenchidos
antes da requisicaos ser feita)
(e ai as coisas sao preenchidas antes da requisicao ser completada)
e os inputs com os {...register('xxx')}


--------------------------------------------

atualizando o perfil de fato
arquivo na api padrao

useMutation chamando essa api que fizemos, mandando
a "data" com os dados dos registers

isSubmitting do useForm pra colocar no botao na prop disable.

DialogClose pra fechar o modal

o staleTime do react-query eh pra ficar atualizando informacoes
que sao oobsoletas, como por exemplo, numero de pedidos do dia.
ou seja, com o infinity, nao vai fazer esse carregamento nunca, pois
o nome do restaurante nao vai ser atualizado com frequencia, e quando for,
vai ser pelo modal, de forma manual do usuario.

---------------------------------------
atualizando perfil com http state

feature incrivel do react-query, alterar o cache de uma requisicao ja feita.\

no useMutation, podemos, alem do mutationFn, tbm pegar o onSuccess, que recebemos
data, que sao os dados retornados(nessse n tem, entao pdoemos botar underline),
no variable, podemos pegar os dados que usamos pra fazer aquela requisicao, pra
atualizar o profile, os dados que enviamos pra atualizar.

podemos desestruturar o variables(com description e name)

vms atualizar a informacao entao.
-primeiro precisamos buscar a informacao que ja tem ali dentro

hook - useQueryClient - getQueryData com a chave da query que queremos atualizar
(tem que ser igual aquela queryKey da requisicao correspondente.)

e entao, podemos dar um setQueryData pra atualizar.
lembrando de colocar de novo a chave managed-restaurant, e o ...chached antes de
colocar as variaveis novas, pois nao sao so essas variaveis que estamos trocando
que existem na requisicao, tbm tem outras, como createdAt, etc.

Podemos exportar a interface dessa requisicao la na pasta de api, e usar os
generics <> pra tipar essas get e setQueryDatas pra facilitar.

RESUMINDO, PODEMOS ATUALIZAR O CACHE, OS DADOS DA REQUSIICAO QUE JA FORAM RETORNANDOS ANTES,
A PARTIR DO SUCESSO DE UMA REQUISICAO QUE VENHA DEPOIS DELA. ( E QUE SE REFERE A ELA)

e assim fechamos a maioria das boas features que o react-query nos da
----------------------------------------------------------------

INTERFACE OTIMISTA 
em alguns casos, eh interessante mudar diretamente o cache mesmo antes da requisicao
finalizar, pois eh algo que dificilmente daria errado e eh algo simples, diferentemente
de uma transacao num banco, onde nao faz sentido atualizar o saldo do usuario depois
de fazer o pagamento antes mesmo do pagamento ser concluido.

algo simples como mudar o nome, eh difcil da erro, entao podemos atualizar a interface
do usuario na hora que o usuario faz a alteracao, sem esperar que o negocio de certo.
e se der errado, so voltar com os dados anterioresÇ

-aquele onSuccess com a logica de alterar o cache, so era feito no caso de sucesso.
-vms pegar toda a logica que tava la dentro e jogar em uma funcao separada.

vms trocar o onSUcess pelo onMutate, que diferentemente do onsuccess, ja eh lida no momento
em que o usuario clica no botao de salvar. 
-nesse onMutate vms chamar aquela funcao que extraimos numa nova funcaozinha, a que estava
no onSuccess anteriormente. 
-agora, qnd usuario clica, automaticamente ja muda, e so depois aparece o toast de sucesso.

-onMutate vamos jogar as variaveis no parametro. nao temos retorno (1o parametro)

agora, quando a requuisicao da certo, o bagulho ja foi atualizado. boa experiencia do user.
mas e se der erro? vai ter atualziado da mesma forma.

entao depois do onMutate, vms fzr tbm o onError. n vms usar o retorno, entao colcoar um underline.
n vms pegar as variaveis, entao vms colocar 2 underline. vms usar apenas o contexto.

contexto sao informacoes q podemos compartilhar entre o c ontexto de uma mutacao
ou query.

entao, vms querer pegar o contexto, que no caso, na funcao de atualizacao, chamamos de
'cache', que sao as informacoes no getQueryData antes de fazrmos as alteracoes.

entao vamos retornar essa { cache } na funcao de atualizacao pra podermos ter acesso
ao chamar essa funcao no onMutate

onMutate({ description, name }) {
      const { cached } = updateManagedRestaurantCache({ description, name })

      return { previousProfile: cached }
    },

    agora, temos o cached no contexto da mutation, da query.
  
entao podemos ter acesso no onError, atraves do context.

onError(_, __, context) {
      if (context?.previousProfile) {
        updateManagedRestaurantCache(context.previousProfile)
      }
    },

    se tem contexto chamado previousProfile(que era cached e renomeamos pra previousProfile),
    entao chamamos a funcao de atualizar o cache de novo, porem agr com os dados antigos

    e o toast de success e error continua la intactos, pois sao chamados no handleUpdateProfile

    - handleUpdateProfile, chama o upDateProfileFn(com useMutation), que no onMutate
    chama o updateManageResuranteCache,. se der certo, tudo bem, se der erro, o onError
    pega e refaz tudo.


    pra testar dando erro, colocar:
      await new Promise((resolve, reject) => {
    setTimeout(reject, 3000)
  })

  no updateProfile (api)

  -----------------------------------------------

  logout 
   - metodo na pasta api chamando a rota
   - useMutation no AccountMenu
   - useNavigation 
   - replace true - pra ao inves de navegar, substituir a pagina(evitar nav back)
   
   --------------------------------------------
   LISTAGEM DE PEDIDOS

-metodo na pasta api - dessa vez, com parametros p filtros e paginacao.
-ver no backend o que essa rota recebe, vemos que tem 3 coisas opcionais
e uma obrigatoria, que eh o pageIndex
-interface sobre oq essa rota vai retornar pelo response.
(quando eh get, a interface se refere ao generics do get, que eh la a tipagem
do response)

-vamos chamar essa rota com useQuery
-eh recebido o result, e nao o orders, pois o orders vem junto com outro objetinho,
entao pegamos result.orders
-result.order && (se existir), e ai o mapa.
-componente que vai ser exibido nesse mapa
-la, interface pras props e colocar tudo dinamico ao inves de estatico, com os orders.xxx
-esse order recebido pelas props do componente eh a order que veio la do useQuery com o result

-pro status, como ha condicionais, vms fzr componente
-type OrderStatus com todos os status possiveis
-interface onde o status eh esse OrderStatus
- orderStatusMap pra atribuir uma string pra cada chave(chave sendo cada item do e "enum")
- no componente, temos o props que recebe a interface, e la no html com condicioanis,
fazer todas as condicionais de acordo com as possiveis chaves (pending, delievered, etc),
colocando o mapa com status entre colchetes, ou seja, vai exibir a string em portugues
que fizemos de cada key (em ingles)

-------------------------------------------------------
PAGINACAO DOS PEDIDOS

no get-orders da api, estamos com o pageIndex como 0, estatico. mas vamos receber essa
informacao por parametro.
-entao - interface, props com desestruturacao e uso do parametro recebido na funcao.

agora, no orders, podemos chamar essa rota da api mandando o pageIndex por la.

const { data: result } = useQuery({
  queryKey: ['orders'],
  queryFn: getOrders,
})

const { data: result } = useQuery({
  queryKey: ['orders'],
  queryFn: () => getOrders({ pageIndex }),
})

vamos armazenar esse valor aonde? no estado?  NAO!
pois o usuario pode estar na pagina 8, e se ele der f5, vai voltar tudo.
No recarregamento das paginas, o estado nao eh mantido. entao vamos armazenar
na propria URL. (page=3)
Assim, usuario pode ate enviar o link pra outra pessoa e essa pessoa abrir exatamente
na mesma paginacacao.

vamos pegar esse parametro com o useSearchParams do react-router-dom
const [searchParams, setSearchParams] = useSearchParams()

const pageIndex = z.coerce
    .number()
    .transform((page) => page - 1)
    .parse(searchParams.get('page') ?? '1')

veja, pegamos o searchParams chamado 'page'. ou seja, 

o normal seria const pageIndex = searchParams.get('page') ?? '0'
mas o zero eh usado programamalmente, o usuario espera que seja 1 a pagina 1

entao por isso fizemos aquele coerce, 

ou Seja, agora, toda a pagina na tela serah o 1, caso nao tenha o parametro na url,
ou sera o valor do parametro da url. e nesses dois casos o valor real que usaremos 
na pageIndex vai ser esse valor menos 1.

-agora vamos fazer a paginacao funcionar nas setinhas embaixo, controlado pelo 
proprio usuario
interface - colocar onPageChange, que recebe o valor atual da pagina
props - botar na desestruturacao
componente - estilizar os botoes de acordo com o valor atual da pagina.
(onClick pra mudar o valor e disabled)

sobre o fluxozin, eu coloquei no Pagination que vai ter uma propriedade chamada onPageChange,
e essa propriedade, la no componente, vai ser chamada num click de qualquer um dos 4 botoes.
quando qlqr onPageChanged de qlqr um botaozinho eh chamado, entao eh chamado o handlePaginate
mandando por parametro um number, que eh calculado la no pagination de acordo com o pageIndex
atual, ou se for um botao da ultima pagina, usa-se o valor total de pages, e se for pra ir
pra primeira pagina, nao usa o pageIndex, apenas manda o valor 0 para la no orders, 
no handlePaginate, o parametro mudar para esse novo valor.

porem, ao dar onPageChanged, a url muda mas a pagina nao, pois o queryKey do useQuery
eh o mesmo, entao a requisicao nao eh refeita. entao, temos que colocar na queryKey 
tambem o valor pageIndex, pois a query depende desse parametro.

--------------------------------------------------------
vamos fazer  o sistema de Filtros

-z.object c schema, type infer, userForm com resolver com schema, register e handlesubmit

z.oject pra validacao
z.infer pra tipagem
useForm com a tipagem do schema
zodResolver com o schema
register e handlesubmit do useForm, 
colocar nos inputs os registers e handleSubmit no form

o select eh um input do radix que nao renderiza um select nativo do html
entao pra usarmos o {...register}, temos que envolve-lo com um Controller

agora, quando alterar a info do select, vai chamar o onValueChange, que vai chamar O
onChange, que vai alterar as informacoes no formulario


-agora vms armazenar os filtros na url tbm

useSearchParams
searchParams.get em cada input
defaultValues ja c om esses valores, caso tenha algo achado na url

funcao handleFilter com as props
pega cada valor, se tiver por exemplo filtrarmos pelo id, setamos.
se setamos outra coisa, mas o id deixamos "parado" entao removemos o id do filtro.
entendedo melhor essa parte, estamos fazendo com que, se o filtro ainda estiver 
marcado  no select ou escrito no input, o filtro continua no la no params da url
pra fazer parte da filtragem. e se apagarmos o filtro por nome, por exemplo, tirando
o nome do input, se nao tivesse essa verificacao, o nome continuaria na url. mas ja que
tem essa verificacao de ver se tem custumerName, entao ele ve que nao ta no input e tira do
da url, pra realmente tirar do filtro.


-no order, obviamente tbbm temos acesso a url, eh como se fosse um estad oglobal,
entao, podemos pegar o useSearchParams e dar o get em cada variavel, 
pra jogar no useQuery com o getOrders, que eh aquela funcao que chama a api.
entao estamos agora pegando os params p mandar p requisicao tbm
(tmb colocar na queryKey.)

na chamada la da api, vms falar tbm que podemos recebber essas outras informacoes
-interface, props, e parametros no metodo api.get

porque a pagina eh atualiozada? pq a url mudou ou pq o useQuery depende de todas
aquelas variaveis, e limpamos tudo, quer dizer que alterou tudo, entao a useQuery
faz a requisica od enovo>?

----------------------------------------------------

DETALHES DE PEDIDOS
-manda id do pedido pro order-details (props)
-OrderDetails com o useQuery ,chama a o getOrderDetails com a  rota da api,
-nesse arquivo da pasta api, fazer a interface do response, pra isso,
copiar o tipo de return dessa rota la no backend

porem todos os pedidos da pagina sao carregados, pois o componente de modal
do radix carrega as parada antes mesmo de abrir o modal, entao, no order-table-rows,
vamos mudar o componente CONTROLLED, que controlamos o estado(abre e fecha) com o estado.
entao, com esse estado que reflete com a abbertura e fechamento desse dialog...
no order-details, vamos receber o props o bool open tambem.
vamos pegar esse bool e colocar no "enable" do useQuery, que agora eh uma flag para
essa query ser chamada ou nao. ou seja,  so vai carregar o valor daquele modal de order
details, caso esse mesmo modal seja open = true

lembrando que criamos o estado la no ordertable, pois eh de la que vamos cchamar o modal.
inicialmente colocamos o isDetailOpen como false, apenas setando como true quando demos o click
(open e atualizando o estado com onOpenChange, chamando o set do useState)

agora, tbm podemos colocar os valores das informacoes em cada um desses pedidos.
como no order-details, recebemos a "order" do response da requisicao que foi feita atraves 
do orderId, entao podemos preencher tudo

----------------------------------------------------------------  
CANCELAR PEDIDOS

api/cancel-order.ts

interface com o orderId
props
patch com orderId na url

no row, que eh onde tem o botao p cancelar, fzr o useMutation com 
o mutateAsync p colocar la no botao e o fn com o metodo la na ./api

quando clicamos no negocio, ele fica canceled, e ai a parada tem que ser atualizada,
pois conbfikguramos que se for canceled, o botao fica desabilitado, pois ele entraria
naquela logica do .includes. 
-pra isso, vms fzr o lance da mudanca de cache. sem interface otimista dessa vez,
ou seja, dps do onSuccess.

o a logica no onSuccess - percorre todas as listas de pedidos que tenho carregadas,
(que estao no cache) seja filtradas, paginadas, e quando encontrar o pedido com o mesmo id com
o pedido que acabou de cancelar, entao troca o status desse pedido.

---------------------------------------------------------------------

OPERACOES NO STATUS DE PEDIDOS

Função de mudar status extraida

Em cada mudation será chamada essa função, cada uma com uma string diferente por 
parâmetro, que se refere ao ato do clique naquele botão. Se for botão de cancelar, 
a string é cancelar

Criar em /api todas as rotas, além dessa de canceled.

Criar mais useMutations p cada ato

Cada usemutationzinha tem seu mutateSync com nome próprio(q vai ser 
chamada pelo clique do usuario) (handle), com o mutationFn próprio, 
chamando a .api correspondente, e a string correspondente no parâmetro 
da função extraída de lidar com mudanças do cache pro status

Dps, fazer cada botão usando ifs, cada um condicionados ao order.status, 
e colocando o texto do botão correspondente
















